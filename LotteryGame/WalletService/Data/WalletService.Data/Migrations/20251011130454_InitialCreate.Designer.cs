// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalletService.Data;

#nullable disable

namespace WalletService.Data.Migrations
{
    [DbContext(typeof(WalletServiceDbContext))]
    [Migration("20251011130454_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WalletService.Data.Models.BalanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("NewBalanceInCents")
                        .HasColumnType("bigint");

                    b.Property<long>("OldBalanceInCents")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("WalletId");

                    b.ToTable("BalanceHistories", t =>
                        {
                            t.HasCheckConstraint("CK_BalanceHistory_PositiveBalance", "[OldBalance] >= 0 AND [NewBalance] >= 0");
                        });
                });

            modelBuilder.Entity("WalletService.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 2 (CPU)"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 3 (CPU)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 4 (CPU)"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 5 (CPU)"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 6 (CPU)"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 7 (CPU)"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 8 (CPU)"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 9 (CPU)"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 10 (CPU)"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 11 (CPU)"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 12 (CPU)"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 13 (CPU)"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 14 (CPU)"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player 15 (CPU)"
                        });
                });

            modelBuilder.Entity("WalletService.Data.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AmountInCents")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCaptured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Reservations", t =>
                        {
                            t.HasCheckConstraint("CK_Reservation_PositiveAmount", "[Amount] >= 0");
                        });
                });

            modelBuilder.Entity("WalletService.Data.Models.ReservationTicket", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReservationId", "TicketId");

                    b.ToTable("ReservationTickets");
                });

            modelBuilder.Entity("WalletService.Data.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BonusMoneyInCents")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("LockedFundsInCents")
                        .HasColumnType("bigint");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<long>("RealMoneyInCents")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Wallets", t =>
                        {
                            t.HasCheckConstraint("CK_Wallet_PositiveBalance", "[RealMoney] >= 0 AND [BonusMoney] >= 0 AND [LockedFunds] >= 0 AND [LoyaltyPoints] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 1,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 2,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 2,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 3,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 3,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 4,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 4,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 5,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 5,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 6,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 6,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 7,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 7,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 8,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 8,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 9,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 9,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 10,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 10,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 11,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 11,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 12,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 12,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 13,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 13,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 14,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 14,
                            RealMoneyInCents = 1000L
                        },
                        new
                        {
                            Id = 15,
                            BonusMoneyInCents = 0L,
                            CreatedOn = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockedFundsInCents = 0L,
                            LoyaltyPoints = 0,
                            PlayerId = 15,
                            RealMoneyInCents = 1000L
                        });
                });

            modelBuilder.Entity("WalletService.Data.Models.BalanceHistory", b =>
                {
                    b.HasOne("WalletService.Data.Models.Reservation", "Reservation")
                        .WithMany("BalanceHistories")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WalletService.Data.Models.Wallet", "Wallet")
                        .WithMany("BalanceHistories")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reservation");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletService.Data.Models.Reservation", b =>
                {
                    b.HasOne("WalletService.Data.Models.Wallet", "Wallet")
                        .WithMany("Reservations")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletService.Data.Models.ReservationTicket", b =>
                {
                    b.HasOne("WalletService.Data.Models.Reservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("WalletService.Data.Models.Wallet", b =>
                {
                    b.HasOne("WalletService.Data.Models.Player", "Player")
                        .WithOne("Wallet")
                        .HasForeignKey("WalletService.Data.Models.Wallet", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("WalletService.Data.Models.Player", b =>
                {
                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("WalletService.Data.Models.Reservation", b =>
                {
                    b.Navigation("BalanceHistories");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WalletService.Data.Models.Wallet", b =>
                {
                    b.Navigation("BalanceHistories");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
